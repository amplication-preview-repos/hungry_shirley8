/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TeacherService } from "../teacher.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TeacherCreateInput } from "./TeacherCreateInput";
import { Teacher } from "./Teacher";
import { TeacherFindManyArgs } from "./TeacherFindManyArgs";
import { TeacherWhereUniqueInput } from "./TeacherWhereUniqueInput";
import { TeacherUpdateInput } from "./TeacherUpdateInput";
import { LessonFindManyArgs } from "../../lesson/base/LessonFindManyArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { LessonWhereUniqueInput } from "../../lesson/base/LessonWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TeacherControllerBase {
  constructor(
    protected readonly service: TeacherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Teacher })
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTeacher(
    @common.Body() data: TeacherCreateInput
  ): Promise<Teacher> {
    return await this.service.createTeacher({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        specialization: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Teacher] })
  @ApiNestedQuery(TeacherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teachers(@common.Req() request: Request): Promise<Teacher[]> {
    const args = plainToClass(TeacherFindManyArgs, request.query);
    return this.service.teachers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        specialization: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Teacher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async teacher(
    @common.Param() params: TeacherWhereUniqueInput
  ): Promise<Teacher | null> {
    const result = await this.service.teacher({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        specialization: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Teacher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTeacher(
    @common.Param() params: TeacherWhereUniqueInput,
    @common.Body() data: TeacherUpdateInput
  ): Promise<Teacher | null> {
    try {
      return await this.service.updateTeacher({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          specialization: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Teacher })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTeacher(
    @common.Param() params: TeacherWhereUniqueInput
  ): Promise<Teacher | null> {
    try {
      return await this.service.deleteTeacher({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          specialization: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/lessons")
  @ApiNestedQuery(LessonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Lesson",
    action: "read",
    possession: "any",
  })
  async findLessons(
    @common.Req() request: Request,
    @common.Param() params: TeacherWhereUniqueInput
  ): Promise<Lesson[]> {
    const query = plainToClass(LessonFindManyArgs, request.query);
    const results = await this.service.findLessons(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        dateTime: true,
        description: true,

        teacher: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "update",
    possession: "any",
  })
  async connectLessons(
    @common.Param() params: TeacherWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        connect: body,
      },
    };
    await this.service.updateTeacher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "update",
    possession: "any",
  })
  async updateLessons(
    @common.Param() params: TeacherWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        set: body,
      },
    };
    await this.service.updateTeacher({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/lessons")
  @nestAccessControl.UseRoles({
    resource: "Teacher",
    action: "update",
    possession: "any",
  })
  async disconnectLessons(
    @common.Param() params: TeacherWhereUniqueInput,
    @common.Body() body: LessonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      lessons: {
        disconnect: body,
      },
    };
    await this.service.updateTeacher({
      where: params,
      data,
      select: { id: true },
    });
  }
}
